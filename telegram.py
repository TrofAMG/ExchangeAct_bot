from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio
import aioschedule
import pandas as pd

import graphics
import strategy_final
import subs

API_TOKEN = 'token'

bot = Bot(token=API_TOKEN)
# For example use simple MemoryStorage for Dispatcher.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# States
class Form(StatesGroup):
    ticker = State()
    start = State()
    stop = State()
    mva = State()
    graph_type = State()
    tik = State()
    mva2 = State()
    randomd = State()
    start2 = State()
    end = State()
    pattern = State()
    ticker3 = State()
    start3 = State()
    stop3 = State()
    subs_ticker = State()
    sma=State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await bot.send_message(message.from_user.id, text='–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.\n\nüí°/start\n–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–∞—Å –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n\nüìà /candles_plot\n–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–π –í–∞–º–∏ –∞–∫—Ü–∏–∏ –Ω–∞ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ —Ç–∞–∫–∂–µ –≤—ã–∑–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É\n\n üìä /plot_with_signal\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ø–µ—Ä–∏–æ–¥.')
    await bot.send_message(message.from_user.id, text='üíº /try_strategy\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (SMA) –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç —Å—Ç—Ä–æ–∏—Ç—Å—è  –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞, –≥–¥–µ –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑—É–µ–º–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.\n\nüì© /subscribe\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤—ã–∑–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.\n\nü§ù /help\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:  @yolomiQ  –∏ –º—ã –≤–∞–º –ø–æ–º–æ–∂–µ–º!üòâ')


@dp.message_handler(commands=['candles_plot'])
async def handle_text(message: types.Message):
    try:
        await Form.ticker.set()
        await bot.send_message(message.from_user.id, text='1. –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ç–∏–∫–µ—Ä:\n\n1) xxxx, –≥–¥–µ xxxx - –∏–Ω–¥–µ–∫—Å –∞–∫—Ü–∏–∏ NASDAQ, –Ω–∞–ø—Ä–∏–º–µ—Ä YNDX.\n\n2) xxxx.me, –≥–¥–µ xxxx - –∏–Ω–¥–µ–∫—Å –∞–∫—Ü–∏–∏ MOEX c –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º (.me), –Ω–∞–ø—Ä–∏–º–µ—Ä SBER.me',
                               parse_mode='HTML')
    except:
        print('–û—à–∏–±–∫–∞ –≤ —á–∞—Å—Ç–∏ candles_plot2')


@dp.message_handler(state=Form.ticker)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['ticker'] = message.text
        await Form.start.set()
        await bot.send_message(message.from_user.id, text="2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n\n —Ö—Ö—Ö—Ö-—Ö—Ö-—Ö—Ö, –≥–≥–≥–≥-–º–º-–¥–¥\n –ù–∞–ø—Ä–∏–º–µ—Ä 2020-01-01",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(state=Form.start)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['start'] = message.text
        await Form.stop.set()
        await bot.send_message(message.from_user.id, text="3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n\n —Ö—Ö—Ö—Ö-—Ö—Ö-—Ö—Ö, –≥–≥–≥–≥-–º–º-–¥–¥\n –ù–∞–ø—Ä–∏–º–µ—Ä 2020-02-01",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(state=Form.stop)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['stop'] = message.text
        await Form.graph_type.set()
        await bot.send_message(message.from_user.id, text="4. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:\n\nüî∏candle - –≥—Ä–∞—Ñ–∏–∫, —Å–æ—á–µ—Ç–∞—é—â–∏–π –≤ —Å–µ–±–µ —è–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ –∏ –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –æ—Å–∏ –∏ –≤—Ä–µ–º—è –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π.\n\nüî∏line - –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –±–µ—Ä—ë—Ç—Å—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\nüî∏renko - –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç—Ä–µ–Ω–¥ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã). –î–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç–∞–∫–∂–µ –ø–æ–¥–∞—ë—Ç —Å–∏–≥–Ω–∞–ª—ã –æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞—Ö –∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\nüî∏pnf - –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä.",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(state=Form.graph_type)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['graph_type'] = message.text
        await Form.mva.set()
        await bot.send_message(message.from_user.id, text="5. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞(SMA): —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –¥–≤—É—Ö —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö ¬´—Ö,—Ö¬ª\n –ù–∞–ø—Ä–∏–º–µ—Ä 5,10",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(state=Form.mva)
async def process_gender(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['mva'] = message.text
            mva = tuple(int(i) for i in list(data['mva'].split(',')))
        graphics.plot_japan(data['ticker'], data['start'], data['stop'], data['graph_type'], mva)
        await bot.send_photo(message.from_user.id, open('graphs/japan.png', 'rb'))
        await bot.send_message(message.from_user.id, text='üîî–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 8:30 –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ü–∏–∏(–∞ —Ç–∞–∫–∂–µ –æ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è)\n‚úîÔ∏è–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe')
        await bot.send_message(message.from_user.id, text='–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å  –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /candle_plot')
        await state.finish()
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await bot.send_message(message.from_user.id,text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏\
                                                      –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ \
                                                      –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: \
                                                      @yolomiQ  –∏ –º—ã –≤–∞–º –ø–æ–º–æ–∂–µ–º!üòâ")


@dp.message_handler(commands=['plot_with_signal'])
async def handle_text(message: types.Message):
    try:
        await Form.tik.set()
        await bot.send_message(message.from_user.id, text='1. –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ç–∏–∫–µ—Ä:\n\n1) xxxx, –≥–¥–µ xxxx - –∏–Ω–¥–µ–∫—Å –∞–∫—Ü–∏–∏ NASDAQ, –ù–∞–ø—Ä–∏–º–µ—Ä YNDX.\n\n2) xxxx.me, –≥–¥–µ xxxx - –∏–Ω–¥–µ–∫—Å –∞–∫—Ü–∏–∏ MOEX c –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º (.me), –ù–∞–ø—Ä–∏–º–µ—Ä SBER.me',

                               parse_mode='HTML')
    except:
        print('–û—à–∏–±–∫–∞ –≤ —á–∞—Å—Ç–∏ plot_with_signal')


@dp.message_handler(state=Form.tik)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['ticker'] = message.text
        await Form.start2.set()
        await bot.send_message(message.from_user.id, text="2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n\n —Ö—Ö—Ö—Ö-—Ö—Ö-—Ö—Ö, –≥–≥–≥–≥-–º–º-–¥–¥\n –ù–∞–ø—Ä–∏–º–µ—Ä 2020-01-01",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id, text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')

@dp.message_handler(state=Form.start2)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['start2'] = message.text
        await Form.end.set()
        await bot.send_message(message.from_user.id, text="3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n\n —Ö—Ö—Ö—Ö-—Ö—Ö-—Ö—Ö, –≥–≥–≥–≥-–º–º-–¥–¥\n –ù–∞–ø—Ä–∏–º–µ—Ä 2020-02-01",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(state=Form.end)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['end'] = message.text
        await Form.mva2.set()
        await bot.send_message(message.from_user.id,
                               text="5. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞(SMA): —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –¥–≤—É—Ö —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö ¬´—Ö,—Ö¬ª\n –ù–∞–ø—Ä–∏–º–µ—Ä 5,10",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(state=Form.mva2)
async def process_gender(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['mva2'] = message.text
            mva = tuple(int(i) for i in list(data['mva2'].split(',')))
        graphics.plot_with_signal(data['ticker'], data['start2'], data['end'], mva)
        await bot.send_photo(message.from_user.id, open('graphs/plot_with_signal.png', 'rb'))
        await bot.send_message(message.from_user.id,
                               text='üîî–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 8:30 –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ü–∏–∏(–∞ —Ç–∞–∫–∂–µ –æ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è)\n‚úîÔ∏è–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe')
        await bot.send_message(message.from_user.id,
                               text='–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å  –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /candle_plot')
        await state.finish()
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


####Backtesting####
@dp.message_handler(commands=['try_strategy'])
async def handle_text(message: types.Message):
    try:
        await Form.ticker3.set()
        await bot.send_message(message.from_user.id,
                               text='1. –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ç–∏–∫–µ—Ä:\n\n1) xxxx, –≥–¥–µ xxxx - –∏–Ω–¥–µ–∫—Å –∞–∫—Ü–∏–∏ NASDAQ, –ù–∞–ø—Ä–∏–º–µ—Ä YNDX.\n\n2) xxxx.me, –≥–¥–µ xxxx - –∏–Ω–¥–µ–∫—Å –∞–∫—Ü–∏–∏ MOEX c –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º (.me), –ù–∞–ø—Ä–∏–º–µ—Ä SBER.me',
                               parse_mode='HTML')
    except:
        print('–û—à–∏–±–∫–∞ –≤ —á–∞—Å—Ç–∏ try_strategy')


@dp.message_handler(state=Form.ticker3)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['ticker'] = message.text
        await Form.start3.set()
        await bot.send_message(message.from_user.id, text="2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n\n —Ö—Ö—Ö—Ö-—Ö—Ö-—Ö—Ö, –≥–≥–≥–≥-–º–º-–¥–¥\n –ù–∞–ø—Ä–∏–º–µ—Ä 2020-01-01",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(state=Form.start3)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['start'] = message.text
        await Form.stop3.set()
        await bot.send_message(message.from_user.id, text="3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n\n —Ö—Ö—Ö—Ö-—Ö—Ö-—Ö—Ö, –≥–≥–≥–≥-–º–º-–¥–¥\n –ù–∞–ø—Ä–∏–º–µ—Ä 2020-02-01",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(state=Form.stop3)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['stop'] = message.text
        strategy_final.try_strategy(data['ticker'], data['start'], data['stop'])
        await bot.send_photo(message.from_user.id, open('graphs/result.png', 'rb'))
        await bot.send_message(message.from_user.id,
                               text='üîî–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 8:30 –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ü–∏–∏(–∞ —Ç–∞–∫–∂–µ –æ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è)\n‚úîÔ∏è–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe')
        await bot.send_message(message.from_user.id,
                               text='–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å  –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /candle_plot')
        await state.finish()
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


###–ü–æ–¥–ø–∏—Å–∫–∞###
@dp.message_handler(commands=['subscribe'])
async def handle_text(message: types.Message):
    try:
        await Form.subs_ticker.set()
        await bot.send_message(message.from_user.id,
                               text="–ù–∞ –∫–∞–∫–æ–π —Ç–∏–∫–µ—Ä(—ã) –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?\n\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ç–∏–∫–µ—Ä:\n1) xxxx, –≥–¥–µ xxxx - –∏–Ω–¥–µ–∫—Å –∞–∫—Ü–∏–∏ NASDAQ, –ù–∞–ø—Ä–∏–º–µ—Ä YNDX.\n2) xxxx.me, –≥–¥–µ xxxx - –∏–Ω–¥–µ–∫—Å –∞–∫—Ü–∏–∏ MOEX c –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º .me, –ù–∞–ø—Ä–∏–º–µ—Ä SBER.me\n\n –ï—Å–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä–æ–≤, —Ç–æ –≤–≤–æ–¥–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Å–ª–∏—Ç–Ω–æ\n–ù–∞–ø—Ä–∏–º–µ—Ä AAPL,SBER.me",
                               parse_mode='HTML')
    except:
        print('–û—à–∏–±–∫–∞ –≤ —á–∞—Å—Ç–∏ subscribe')


@dp.message_handler(state=Form.subs_ticker)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['subs_ticker'] = message.text
            data['username'] = message.from_user.id
        await Form.sma.set()
        await bot.send_message(message.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞(SMA): —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –¥–≤—É—Ö —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö ¬´—Ö,—Ö¬ª\n –ù–∞–ø—Ä–∏–º–µ—Ä 5,10",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


@dp.message_handler(state=Form.sma)
async def process_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['sma'] = message.text
        subs.set_tickers(data['username'], data['subs_ticker'], data['sma'])
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–¢–∏–∫–µ—Ä(—ã) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω(—ã)",
                               parse_mode='HTML')
    except:
        await state.finish()
        await bot.send_message(message.from_user.id,
                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–∏–∫–µ—Ä—ã —Ä—É—Å—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .me –≤ –∫–æ–Ω—Ü–µ\n–ü—Ä–∏–º–µ—Ä\nSBER.me",
                               parse_mode='HTML')


###–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤###
async def send_indicator():
    try:
        strategy_final.comp_strategy()
        df = pd.read_csv('database.csv', header=0, sep=';')
        for index, row in df.iterrows():
            await bot.send_message(row.nickname, text='–¢–∏–∫–µ—Ä:{0}\n –î–µ–π—Å—Ç–≤–∏–µ:{1}'.format(row.tickers, row.actions_all))
    except:
        print('–û—à–∏–±–∫–∞ –≤ send_indicator()')


async def scheduler():
    aioschedule.every().day.at("8:30").do(send_indicator)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(_):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)
